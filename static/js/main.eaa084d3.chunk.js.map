{"version":3,"sources":["functions/FlattenSearchOptions.ts","functions/CreateAccordionsRecursive.tsx","components/TopBar.tsx","App.tsx","index.tsx"],"names":["flatten","json","flatArray","notes","group","code","slice","push","id","label","title","disabled","enabled","children","forEach","child","colors","depth","color","grey","createAccordion","expanded","setExpanded","matchDepth","theme","match","expand","palette","error","main","text","Accordion","elevation","onChange","length","levelUp","replace","style","background","AccordionSummary","expandIcon","ExpandMore","display","Typography","flex","paddingRight","fontWeight","variant","AccordionDetails","map","nestedCode","TopBar","colorMode","useColorModeContext","useTheme","AppBar","position","Toolbar","noWrap","component","sx","flexGrow","xs","sm","IconButton","size","Search","ml","onClick","toggleColorMode","mode","Brightness7","Brightness4","ColorModeContext","React","createContext","useContext","App","useState","setMode","useMemo","prevMode","createTheme","primary","blue","divider","secondary","deepOrange","default","paper","getDesignTokens","ddc","setDDC","searchOptions","setSearchOptions","useEffect","ddcJson","flatJson","Provider","value","ThemeProvider","height","alignItems","flexDirection","Helmet","CssBaseline","textAlign","paddingLeft","paddingTop","width","maxWidth","Paper","marginBottom","padding","Autocomplete","options","getOptionDisabled","option","groupBy","event","newValue","renderInput","params","TextField","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAEO,SAASA,EAAQC,EAAeC,GACnC,IAAIC,EAAQ,GACRF,EAAKE,QACLA,EAAK,YAAQF,EAAKE,MAAb,MAET,IAAMC,EAAQH,EAAKI,KAAKC,MAAM,EAAG,GAAK,IAKtC,OAJAJ,EAAUK,KAAK,CAACC,GAAIP,EAAKI,KAAMI,MAAO,UAAGR,EAAKI,KAAR,aAAiBJ,EAAKS,OAAUP,EAAOC,MAAOA,EAAOO,UAAWV,EAAKW,UACvGX,EAAKY,UACLZ,EAAKY,SAASC,SAAQ,SAAAC,GAAK,OAAIf,EAAQe,EAAOb,MAE3CA,E,wDCNLc,EAAS,SAACC,GACZ,IAAMC,EAAQC,IACd,OAAQF,GACJ,KAAK,EACD,OAAOC,EAAM,IACjB,KAAK,EACD,OAAOA,EAAM,KACjB,KAAK,EACD,OAAOA,EAAM,KACjB,KAAK,EACD,OAAOA,EAAM,KACjB,KAAK,EACD,OAAOA,EAAM,KACjB,KAAK,EACD,OAAOA,EAAM,OAIlB,SAASE,EAAgBf,EAAegB,EAAyBC,EAAkBC,EAAoBC,GAEzD,MAA7CnB,EAAKA,KAAKC,MAAM,EAAGiB,GAAYjB,OAAO,KACtCiB,GAA0B,GAE9B,IAAME,EAAQpB,EAAKA,KAAKC,MAAM,EAAGiB,GAC7BG,GAAS,EACTL,IACAK,EAASL,EAASf,MAAM,EAAGiB,KAAgBE,GAE/C,IAAMP,EAAQQ,EAASF,EAAMG,QAAQC,MAAMC,KAAOL,EAAMG,QAAQG,KAAKD,KAGrE,OAAIxB,EAAKQ,SACE,eAACkB,EAAA,EAAD,CACHC,UAAW,EACXrB,UAAWN,EAAKO,QAChBS,SAAUK,EACVO,SAAU,WACN,GAAIZ,IAAahB,EAAKA,KAClB,GAAIA,EAAKA,KAAK6B,OAAS,EACnBZ,EAAYjB,EAAKA,KAAKC,MAAM,GAAI,QAC7B,CAGH,IAFA,IACI6B,EADU9B,EAAKA,KAAK+B,QAAQ,QAAS,IACnB9B,MAAM,GAAI,GACzB6B,EAAQD,OAAS,GACpBC,GAAoB,IAExBb,EAAYa,QAGhBb,EAAYjB,EAAKA,OAGzBgC,MAAO,CAACC,WAAYtB,EAAOO,IApBxB,UAqBH,eAACgB,EAAA,EAAD,CAAkBC,WAAY,cAACC,EAAA,EAAD,IAAeJ,MAAO,CAACK,QAAS,QAA9D,UACI,cAACC,EAAA,EAAD,CAAYN,MAAO,CAACO,KAAM,EAAGC,aAAc,KAAMC,WAAY,QAA7D,SAAuEzC,EAAKA,OAC5E,sBAAKgC,MAAO,CAACO,KAAM,IAAnB,UACI,cAACD,EAAA,EAAD,CAAYN,MAAO,CAACnB,MAAOA,EAAO4B,WAAY,QAA9C,SAAwDzC,EAAKK,QAC7D,cAACiC,EAAA,EAAD,CAAYI,QAAQ,UAApB,SAA+B1C,EAAKF,cAG5C,cAAC6C,EAAA,EAAD,UACK3C,EAAKQ,SAASoC,KAAI,SAAAC,GAAU,OAAI9B,EAAgB8B,EAAY7B,EAAUC,EAAaC,EAAa,EAAGC,WAIrG,cAACO,EAAA,EAAD,CACHC,UAAW,EACXrB,UAAWN,EAAKO,QAChBS,SAAUA,IAAahB,EAAKA,KAC5BgC,MAAO,CAACC,WAAYtB,EAAOO,IAJxB,SAMH,eAACgB,EAAA,EAAD,CAAkBF,MAAO,CAACK,QAAS,QAAnC,UACI,cAACC,EAAA,EAAD,CAAYN,MAAO,CAACO,KAAM,EAAGC,aAAc,KAAMC,WAAY,QAA7D,SAAuEzC,EAAKA,OAC5E,sBAAKgC,MAAO,CAACO,KAAM,IAAnB,UACI,cAACD,EAAA,EAAD,CAAYN,MAAO,CAACnB,MAAOA,EAAO4B,WAAY,QAA9C,SAAwDzC,EAAKK,QAC7D,cAACiC,EAAA,EAAD,CAAYI,QAAQ,UAApB,SAA+B1C,EAAKF,gB,kECpDzCgD,MAzBf,WACI,IAAMC,EAAYC,IACZ7B,EAAQ8B,cACd,OACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACd,EAAA,EAAD,CACII,QAAQ,KACRW,QAAM,EACNC,UAAU,MACVC,GAAI,CAACC,SAAU,EAAGnB,QAAS,CAACoB,GAAI,OAAQC,GAAI,UAJhD,0CAQA,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQ,aAAW,SAAS/C,MAAM,UAAnD,SACI,cAACgD,EAAA,EAAD,MAEJ,cAACF,EAAA,EAAD,CAAYJ,GAAI,CAACO,GAAI,GAAIC,QAAShB,EAAUiB,gBAAiBnD,MAAM,UAAnE,SAC4B,SAAvBM,EAAMG,QAAQ2C,KAAkB,cAACC,EAAA,EAAD,IAAiB,cAACC,EAAA,EAAD,YCoBhEC,EAAmBC,IAAMC,cAAc,CAACN,gBAAiB,eAClDhB,EAAsB,kBAAMuB,qBAAWH,IA8ErCI,MA5Ef,WACI,MAAwBC,mBAAsB,SAA9C,mBAAOR,EAAP,KAAaS,EAAb,KAEM3B,EAAY4B,mBACd,iBAAO,CAEHX,gBAAiB,WACbU,GAAQ,SAACE,GAAD,MACS,UAAbA,EAAuB,OAAS,eAI5C,IAIEzD,EAAQwD,mBAAQ,kBAAME,YAhDR,SAACZ,GAAD,MAAwB,CAC5C3C,QAAQ,aACJ2C,QACa,UAATA,EACE,CAEEa,QAASC,IACTC,QAASD,IAAK,KACdtD,KAAM,CACFqD,QAASC,IAAK,KACdE,UAAWF,IAAK,OAGtB,CAEED,QAASI,IACTF,QAASE,IAAW,KACpBjD,WAAY,CACRkD,QAASD,IAAW,KACpBE,MAAOF,IAAW,MAEtBzD,KAAM,CACFqD,QAAS,OACTG,UAAWnE,IAAK,SAyBQuE,CAAgBpB,MAAQ,CAACA,IAEjE,EAAgCQ,mBAAwB,OAAxD,mBAAOzD,EAAP,KAAiBC,EAAjB,KACA,EAAsBwD,mBAAoB,IAA1C,mBAAOa,EAAP,KAAYC,EAAZ,KACA,EAA0Cd,mBAAyB,IAAnE,mBAAOe,EAAP,KAAsBC,EAAtB,KAQA,OANAC,qBAAU,WACNH,EAAOI,GACP,IAAMC,EAAWD,EAAQ/C,KAAI,SAAA0C,GAAG,OAAI3F,EAAQ2F,EAAK,OAAK,GACtDG,EAAiBG,KAClB,IAGC,cAACxB,EAAiByB,SAAlB,CAA2BC,MAAO/C,EAAlC,SACI,cAACgD,EAAA,EAAD,CAAe5E,MAAOA,EAAtB,SACI,sBAAKa,MAAO,CACRC,WAAYd,EAAMG,QAAQW,WAAWkD,QACrCa,OAAQ,QACR3D,QAAS,OACT4D,WAAY,SACZC,cAAe,UALnB,UAOI,cAACC,EAAA,EAAD,UACI,gCAAQ,gBAEZ,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,IACA,qBAAKpE,MAAO,CACRqE,UAAW,SACXC,YAAa,GACbC,WAAY,GACZ/D,aAAc,GACdgE,MAAO,OACPC,SAAU,KANd,SAQI,cAACC,EAAA,EAAD,CAAO1E,MAAO,CAACqE,UAAW,OAAQM,aAAc,GAAIH,MAAO,OAAQI,QAAS,IAA5E,SACI,cAACC,EAAA,EAAD,CACIC,QAAStB,EACTuB,kBAAmB,SAACC,GAAD,OAAYA,EAAO1G,UACtC2G,QAAS,SAACD,GAAD,OAAYA,EAAOjH,OAC5B6B,SAAU,SAACsF,EAAOC,GAEVlG,EADAkG,EACYA,EAAShH,GAETgH,IAGpBC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuB3E,QAAQ,WAAWtC,MAAM,sBAIrF,qBAAK4B,MAAO,CAACyE,SAAU,IAAKG,QAAS,GAAIJ,MAAO,QAAhD,gBACKlB,QADL,IACKA,OADL,EACKA,EAAK1C,KAAI,SAAA5C,GAAI,OAAIe,EAAgBf,EAAMgB,EAAUC,EAAa,EAAGE,gBC5G1FoG,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U","file":"static/js/main.eaa084d3.chunk.js","sourcesContent":["import {ddcCode, searchOption} from \"../types/types\";\n\nexport function flatten(json: ddcCode, flatArray: searchOption[]): searchOption[] {\n    let notes = ''\n    if (json.notes) {\n        notes = ` (${json.notes})`\n    }\n    const group = json.code.slice(0, 2) + '0'\n    flatArray.push({id: json.code, label: `${json.code}: ${json.title}` + notes, group: group, disabled: !json.enabled})\n    if (json.children) {\n        json.children.forEach(child => flatten(child, flatArray))\n    }\n    return flatArray\n}","import {ddcCode} from \"../types/types\";\nimport {Accordion, AccordionDetails, AccordionSummary, Typography} from \"@mui/material\";\nimport {ExpandMore} from \"@mui/icons-material\";\nimport React from \"react\";\nimport {grey} from \"@mui/material/colors\";\n\nconst colors = (depth: number) => {\n    const color = grey\n    switch (depth) {\n        case 1:\n            return color[50]\n        case 2:\n            return color[100]\n        case 3:\n            return color[300]\n        case 4:\n            return color[400]\n        case 5:\n            return color[500]\n        case 6:\n            return color[600]\n    }\n}\n\nexport function createAccordion(code: ddcCode, expanded: string | null, setExpanded: any, matchDepth: number, theme: any) {\n\n    if (code.code.slice(0, matchDepth).slice(-1) === '.') {\n        matchDepth = matchDepth + 1\n    }\n    const match = code.code.slice(0, matchDepth)\n    let expand = false\n    if (expanded) {\n        expand = expanded.slice(0, matchDepth) === match\n    }\n    const color = expand ? theme.palette.error.main : theme.palette.text.main\n\n\n    if (code.children) {\n        return <Accordion\n            elevation={2}\n            disabled={!code.enabled}\n            expanded={expand}\n            onChange={() => {\n                if (expanded === code.code) {\n                    if (code.code.length > 4) {\n                        setExpanded(code.code.slice(0, -1))\n                    } else {\n                        let trimmed = code.code.replace(/[.0]/g, '')\n                        let levelUp = trimmed.slice(0, -1)\n                        while (levelUp.length < 3) {\n                            levelUp = levelUp + '0'\n                        }\n                        setExpanded(levelUp)\n                    }\n                } else {\n                    setExpanded(code.code)\n                }\n            }}\n            style={{background: colors(matchDepth)}}>\n            <AccordionSummary expandIcon={<ExpandMore/>} style={{display: 'flex'}}>\n                <Typography style={{flex: 1, paddingRight: '5%', fontWeight: 'bold'}}>{code.code}</Typography>\n                <div style={{flex: 10}}>\n                    <Typography style={{color: color, fontWeight: 'bold'}}>{code.title}</Typography>\n                    <Typography variant='caption'>{code.notes}</Typography>\n                </div>\n            </AccordionSummary>\n            <AccordionDetails>\n                {code.children.map(nestedCode => createAccordion(nestedCode, expanded, setExpanded, matchDepth + 1, theme))}\n            </AccordionDetails>\n        </Accordion>\n    } else {\n        return <Accordion\n            elevation={2}\n            disabled={!code.enabled}\n            expanded={expanded === code.code}\n            style={{background: colors(matchDepth)}}\n        >\n            <AccordionSummary style={{display: 'flex'}}>\n                <Typography style={{flex: 1, paddingRight: '5%', fontWeight: 'bold'}}>{code.code}</Typography>\n                <div style={{flex: 10}}>\n                    <Typography style={{color: color, fontWeight: 'bold'}}>{code.title}</Typography>\n                    <Typography variant='caption'>{code.notes}</Typography>\n                </div>\n            </AccordionSummary>\n        </Accordion>\n    }\n}\n","import {AppBar, IconButton, Toolbar, Typography, useTheme} from \"@mui/material\";\nimport {Brightness4, Brightness7, More, Search} from \"@mui/icons-material\";\nimport {useColorModeContext} from \"../App\";\n\nfunction TopBar() {\n    const colorMode = useColorModeContext()\n    const theme = useTheme()\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography\n                    variant=\"h6\"\n                    noWrap\n                    component=\"div\"\n                    sx={{flexGrow: 1, display: {xs: 'none', sm: 'block'}}}\n                >\n                    Dewey Decimal Classification\n                </Typography>\n                <IconButton size=\"large\" aria-label=\"search\" color=\"inherit\">\n                    <Search/>\n                </IconButton>\n                <IconButton sx={{ml: 1}} onClick={colorMode.toggleColorMode} color=\"inherit\">\n                    {theme.palette.mode === 'dark' ? <Brightness7/> : <Brightness4/>}\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default TopBar","import React, {useContext, useEffect, useMemo, useState} from 'react';\nimport {\n    CssBaseline,\n    TextField, Autocomplete, Paper, PaletteMode, createTheme, ThemeProvider\n} from '@mui/material';\nimport ddcJson from './ddc.json'\nimport {amber, blue, deepOrange, grey} from \"@mui/material/colors\";\nimport {Helmet} from 'react-helmet'\nimport {ddcCode, searchOption} from \"./types/types\";\nimport {flatten} from \"./functions/FlattenSearchOptions\";\nimport {createAccordion} from \"./functions/CreateAccordionsRecursive\";\nimport TopBar from \"./components/TopBar\";\n\nconst getDesignTokens = (mode: PaletteMode) => ({\n    palette: {\n        mode,\n        ...(mode === 'light'\n            ? {\n                // palette values for light mode\n                primary: blue,\n                divider: blue[200],\n                text: {\n                    primary: blue[900],\n                    secondary: blue[800],\n                },\n            }\n            : {\n                // palette values for dark mode\n                primary: deepOrange,\n                divider: deepOrange[700],\n                background: {\n                    default: deepOrange[900],\n                    paper: deepOrange[900],\n                },\n                text: {\n                    primary: '#fff',\n                    secondary: grey[500],\n                },\n            }),\n    },\n});\n\nconst ColorModeContext = React.createContext({toggleColorMode: () => {}})\nexport const useColorModeContext = () => useContext(ColorModeContext);\n\nfunction App() {\n    const [mode, setMode] = useState<PaletteMode>('light');\n\n    const colorMode = useMemo(\n        () => ({\n            // The dark mode switch would invoke this method\n            toggleColorMode: () => {\n                setMode((prevMode: PaletteMode) =>\n                    prevMode === 'light' ? 'dark' : 'light',\n                );\n            },\n        }),\n        [],\n    );\n\n    // Update the theme only if the mode changes\n    const theme = useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\n\n    const [expanded, setExpanded] = useState<string | null>('200');\n    const [ddc, setDDC] = useState<ddcCode[]>([]);\n    const [searchOptions, setSearchOptions] = useState<searchOption[]>([]);\n\n    useEffect(() => {\n        setDDC(ddcJson)\n        const flatJson = ddcJson.map(ddc => flatten(ddc, []))[2] //2 for Religion 200\n        setSearchOptions(flatJson)\n    }, []);\n\n    return (\n        <ColorModeContext.Provider value={colorMode}>\n            <ThemeProvider theme={theme}>\n                <div style={{\n                    background: theme.palette.background.default,\n                    height: '100vh',\n                    display: 'flex',\n                    alignItems: \"center\",\n                    flexDirection: \"column\"\n                }}>\n                    <Helmet>\n                        <title>{\"DDC Index\"}</title>\n                    </Helmet>\n                    <CssBaseline/>\n                    <TopBar/>\n                    <div style={{\n                        textAlign: 'center',\n                        paddingLeft: 20,\n                        paddingTop: 20,\n                        paddingRight: 20,\n                        width: '100%',\n                        maxWidth: 900\n                    }}>\n                        <Paper style={{textAlign: 'left', marginBottom: 10, width: '100%', padding: 15}}>\n                            <Autocomplete\n                                options={searchOptions}\n                                getOptionDisabled={(option) => option.disabled}\n                                groupBy={(option) => option.group}\n                                onChange={(event, newValue) => {\n                                    if (newValue) {\n                                        setExpanded(newValue.id)\n                                    } else {\n                                        setExpanded(newValue)\n                                    }\n                                }}\n                                renderInput={(params) => <TextField {...params} variant='outlined' label=\"Search...\"/>}\n                            />\n                        </Paper>\n                    </div>\n                    <div style={{maxWidth: 900, padding: 20, width: '100%'}}>\n                        {ddc?.map(code => createAccordion(code, expanded, setExpanded, 1, theme))}\n                    </div>\n                </div>\n            </ThemeProvider>\n        </ColorModeContext.Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}