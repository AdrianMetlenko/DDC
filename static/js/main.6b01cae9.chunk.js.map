{"version":3,"sources":["functions/FlattenSearchOptions.ts","functions/CreateAccordionsRecursive.tsx","Theme.ts","components/TopBar.tsx","App.tsx","index.tsx"],"names":["flatten","json","flatArray","notes","group","code","slice","push","id","label","title","disabled","enabled","children","forEach","child","createAccordion","expanded","setExpanded","matchDepth","theme","match","expand","color","palette","secondary","dark","text","main","Accordion","elevation","onChange","length","levelUp","replace","style","background","alpha","paper","AccordionSummary","expandIcon","ExpandMore","display","Typography","flex","paddingRight","fontWeight","variant","AccordionDetails","map","nestedCode","ColorModeContext","React","createContext","toggleColorMode","TopBar","height","colorMode","useContext","useTheme","AppBar","position","sx","justifyContent","Toolbar","width","primary","contrastText","textAlign","IconButton","marginLeft","onClick","mode","Brightness7","Brightness4","App","useState","setMode","useMemo","prevMode","createTheme","blueGrey","orange","light","default","getDesignTokens","ddc","setDDC","searchOptions","setSearchOptions","useEffect","ddcJson","flatJson","Provider","value","ThemeProvider","marginTop","alignItems","flexDirection","Helmet","CssBaseline","paddingLeft","paddingTop","maxWidth","Paper","marginBottom","padding","Autocomplete","options","getOptionDisabled","option","groupBy","event","newValue","renderInput","params","TextField","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b01cae9.chunk.js","sourcesContent":["import {ddcCode, searchOption} from \"../types/types\";\n\nexport function flatten(json: ddcCode, flatArray: searchOption[]): searchOption[] {\n    let notes = ''\n    if (json.notes) {\n        notes = ` (${json.notes})`\n    }\n    const group = json.code.slice(0, 2) + '0'\n    flatArray.push({id: json.code, label: `${json.code}: ${json.title}` + notes, group: group, disabled: !json.enabled})\n    if (json.children) {\n        json.children.forEach(child => flatten(child, flatArray))\n    }\n    return flatArray\n}","import {ddcCode} from \"../types/types\";\nimport {Accordion, AccordionDetails, AccordionSummary, alpha, Typography} from \"@mui/material\";\nimport {ExpandMore} from \"@mui/icons-material\";\nimport React from \"react\";\n\nexport function createAccordion(code: ddcCode, expanded: string | null, setExpanded: any, matchDepth: number, theme: any) {\n\n    if (code.code.slice(0, matchDepth).slice(-1) === '.') {\n        matchDepth = matchDepth + 1\n    }\n    const match = code.code.slice(0, matchDepth)\n    let expand = false\n    if (expanded) {\n        expand = expanded.slice(0, matchDepth) === match\n    }\n    const color = expand ? theme.palette.secondary.dark : theme.palette.text.main\n\n    if (code.children) {\n        return <Accordion\n            elevation={2}\n            disabled={!code.enabled}\n            expanded={expand}\n            onChange={() => {\n                if (expanded === code.code) {\n                    if (code.code.length > 4) {\n                        setExpanded(code.code.slice(0, -1))\n                    } else {\n                        let trimmed = code.code.replace(/[.0]/g, '')\n                        let levelUp = trimmed.slice(0, -1)\n                        while (levelUp.length < 3) {\n                            levelUp = levelUp + '0'\n                        }\n                        setExpanded(levelUp)\n                    }\n                } else {\n                    setExpanded(code.code)\n                }\n            }}\n            style={{background: alpha(theme.palette.background.paper, 0.4)}}>\n            <AccordionSummary expandIcon={<ExpandMore/>} style={{display: 'flex'}}>\n                <Typography style={{color: color, flex: 1, paddingRight: '5%', fontWeight: 'bold'}}>{code.code}</Typography>\n                <div style={{flex: 10}}>\n                    <Typography style={{color: color, fontWeight: 'bold'}}>{code.title}</Typography>\n                    <Typography variant='caption'>{code.notes}</Typography>\n                </div>\n            </AccordionSummary>\n            <AccordionDetails>\n                {code.children.map(nestedCode => createAccordion(nestedCode, expanded, setExpanded, matchDepth + 1, theme))}\n            </AccordionDetails>\n        </Accordion>\n    } else {\n        return <Accordion\n            elevation={2}\n            disabled={!code.enabled}\n            expanded={expanded === code.code}\n            style={{background: alpha(theme.palette.background.paper, 0.3)}}\n        >\n            <AccordionSummary style={{display: 'flex'}}>\n                <Typography style={{flex: 1, paddingRight: '5%', fontWeight: 'bold'}}>{code.code}</Typography>\n                <div style={{flex: 10}}>\n                    <Typography style={{color: color, fontWeight: 'bold'}}>{code.title}</Typography>\n                    <Typography variant='caption'>{code.notes}</Typography>\n                </div>\n            </AccordionSummary>\n        </Accordion>\n    }\n}\n","import {blueGrey, grey, orange} from \"@mui/material/colors\";\nimport React, {useContext} from \"react\";\n\nimport {\n    CssBaseline,\n    TextField, Autocomplete, Paper, PaletteMode, createTheme, ThemeProvider, PaletteColorOptions, ThemeOptions\n} from '@mui/material';\n\nexport const ColorModeContext = React.createContext({toggleColorMode: () => {}})\nexport const useColorModeContext = () => useContext(ColorModeContext);\n\nexport const getDesignTokens = (mode: PaletteMode) => ({\n    palette: {\n        mode,\n        ...(mode === 'light'\n            ? {\n                // palette values for light mode\n                primary: blueGrey,\n                secondary: orange,\n                // text:{\n                //     main: \"#568FA6\"\n                // },\n                // background: {\n                //     default: grey['200'],\n                //     paper: grey['400']\n                // },\n                // text: {\n                //     primary: light_mode[4],\n                //     secondary: light_mode[3],\n                // },\n            }:\n            {\n                // palette values for dark mode\n                primary: {\n                    light: \"#272C4A\",\n                    main: \"#222845\",\n                    dark: \"#1A2039\"\n                },\n                secondary: {\n                    light: \"#F2CA50\",\n                    main: \"#F2CA50\",\n                    dark: \"#D99E30\"\n                },\n                background: {\n                    default: \"#1A2039\",\n                    paper: \"#222845\",\n                },\n                text: {\n                    primary: \"#E6EEF8\",\n                    secondary: \"#A1A5AB\",\n                },\n            }),\n    },\n} as ThemeOptions);","import {AppBar, IconButton, Toolbar, Typography, useTheme} from \"@mui/material\";\nimport {Brightness4, Brightness7, More, Search} from \"@mui/icons-material\";\nimport {useColorModeContext} from \"../Theme\";\n\nfunction TopBar({height}: {height: number}) {\n    const colorMode = useColorModeContext()\n    const theme = useTheme()\n    return (\n        <AppBar position=\"fixed\" elevation={5} sx={{height: height, justifyContent: 'center'}}>\n            <Toolbar style={{width: '100%'}}>\n                <div style={{flex: 1}}/>\n                <Typography variant=\"h5\" style={{color: theme.palette.primary.contrastText, flex: 1, textAlign: 'center'}}>\n                    Dewey Decimal Classification\n                </Typography>\n                <div style={{flex: 1, display: 'flex'}}>\n                    <IconButton style={{marginLeft: 'auto'}} onClick={colorMode.toggleColorMode} color=\"inherit\">\n                        {theme.palette.mode === 'dark' ? <Brightness7/> : <Brightness4/>}\n                    </IconButton>\n                </div>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default TopBar","import React, {useEffect, useMemo, useState} from 'react';\nimport {\n    CssBaseline,\n    TextField, Autocomplete, Paper, PaletteMode, createTheme, ThemeProvider\n} from '@mui/material';\nimport ddcJson from './ddc.json'\nimport {Helmet} from 'react-helmet'\nimport {ddcCode, searchOption} from \"./types/types\";\nimport {flatten} from \"./functions/FlattenSearchOptions\";\nimport {createAccordion} from \"./functions/CreateAccordionsRecursive\";\nimport TopBar from \"./components/TopBar\";\nimport {ColorModeContext, getDesignTokens} from \"./Theme\";\n\nfunction App() {\n    const [mode, setMode] = useState<PaletteMode>('light');\n\n    const colorMode = useMemo(\n        () => ({\n            // The dark mode switch would invoke this method\n            toggleColorMode: () => {\n                setMode((prevMode: PaletteMode) =>\n                    prevMode === 'light' ? 'dark' : 'light',\n                );\n            },\n        }),\n        [],\n    );\n\n    // Update the theme only if the mode changes\n    const theme = useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\n\n    const [expanded, setExpanded] = useState<string | null>('200');\n    const [ddc, setDDC] = useState<ddcCode[]>([]);\n    const [searchOptions, setSearchOptions] = useState<searchOption[]>([]);\n\n    useEffect(() => {\n        setDDC(ddcJson)\n        const flatJson = ddcJson.map(ddc => flatten(ddc, []))[2] //2 for Religion 200\n        setSearchOptions(flatJson)\n    }, []);\n\n    return (\n        <ColorModeContext.Provider value={colorMode}>\n            <ThemeProvider theme={theme}>\n                <TopBar height={70}/>\n                <div style={{\n                    background: theme.palette.background.default,\n                    marginTop: 70,\n                    height: 'calc(100vh - 80px)',\n                    display: 'flex',\n                    alignItems: \"center\",\n                    flexDirection: \"column\"\n                }}>\n                    <Helmet>\n                        <title>{\"DDC Index\"}</title>\n                    </Helmet>\n                    <CssBaseline/>\n\n                    <div style={{\n                        textAlign: 'center',\n                        paddingLeft: 20,\n                        paddingTop: 20,\n                        paddingRight: 20,\n                        width: '100%',\n                        maxWidth: 900\n                    }}>\n                        <Paper style={{textAlign: 'left', marginBottom: 10, width: '100%', padding: 15}}>\n                            <Autocomplete\n                                options={searchOptions}\n                                getOptionDisabled={(option) => option.disabled}\n                                groupBy={(option) => option.group}\n                                onChange={(event, newValue) => {\n                                    if (newValue) {\n                                        setExpanded(newValue.id)\n                                    } else {\n                                        setExpanded(newValue)\n                                    }\n                                }}\n                                renderInput={(params) => <TextField {...params} variant='outlined' label=\"Search...\"/>}\n                            />\n                        </Paper>\n                    </div>\n                    <div style={{maxWidth: 900, padding: 20, width: '100%'}}>\n                        {ddc?.map(code => createAccordion(code, expanded, setExpanded, 1, theme))}\n                    </div>\n                </div>\n            </ThemeProvider>\n        </ColorModeContext.Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}